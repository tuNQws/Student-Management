import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
 
 public class bt2 {
 
	 //read trans file and show the list of: Game_type List_IDs
 public static class TransMapper extends Mapper <Object, Text, Text, Text>
 {
 public void map(Object key, Text value, Context context) 
 throws IOException, InterruptedException 
 {
	 String line = value.toString().trim();
	 String[] parts = line.split(",");
	 
	 String id = parts[2];
	 String amount = parts[3];
	 String gametype = parts[4];
	 
	 context.write(new Text(gametype), new Text(id));

 }
 }
 
 public static class TransReducer extends Reducer <Text, Text, Text, Text>
 {
 public void reduce(Text key, Iterable<Text> values, Context context)
 throws IOException, InterruptedException 
 {
    //double sum = 0.0;
	 String IDlist = "";
	 List<String> ids = new ArrayList<String>();
	 
    for (Text value : values)
    {
    	//sum = sum + Float.parseFloat(value.toString().trim());
    	String id = value.toString();
    	
    	if( !ids.contains(id)) {
    		ids.add(id);
    		IDlist = IDlist + value + ",";
    	}
    }
    
    context.write(key, new Text(IDlist));

 }
 }
 
 public static void main(String[] args) throws Exception {
 Configuration conf = new Configuration();
 Job job = new Job(conf, "Trans analysis 1");
 job.setJarByClass(bt2.class);
 job.setMapperClass(TransMapper.class);
 job.setReducerClass(TransReducer.class);
 job.setOutputKeyClass(Text.class);
 job.setOutputValueClass(Text.class);
 
 //job.setNumReduceTasks(0);
 
 FileInputFormat.addInputPath(job, new Path(args[0]));
 FileOutputFormat.setOutputPath(job, new Path(args[1]));
 System.exit(job.waitForCompletion(true) ? 0 : 1);
 }
 }


