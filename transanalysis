import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
 
 public class map1 {
 
	 //read trans file and show the list of: Game_type Total_amount
 public static class TransMapper extends Mapper <Object, Text, Text, Text>
 {
 public void map(Object key, Text value, Context context) 
 throws IOException, InterruptedException 
 {
    String record = value.toString();
    String[] parts = record.split(",");
    context.write(new Text(parts[2]), new Text(parts[3]+"_"+parts[4]));
 
 }
 }
 
 public static class TransReducer extends Reducer <Text, Text, Text, Text>
 {
 public void reduce(Text key, Iterable<Text> values, Context context)
 throws IOException, InterruptedException 
 {

	
	int count = 0;
	String[] gametypes=new String[10];
	int[] counts=new int[10];
	float[] amounts =new float[10];
	int flag=0;
	for (Text t : values) 
	{ 
		flag=0;
		 String parts[] = t.toString().split("_");
		 for(int i=0;i<count;i++)
		 {
			 
			 if(gametypes[i].equals(parts[1])){
				 counts[i]++;
				 amounts[i]+=Float.parseFloat(parts[0].toString());
					flag=1;
			 }
					 
			 
		 }
		 if (flag==0) 
		 {
			 counts[count]=1;
			 gametypes[count]=parts[1];
			 amounts[count]=Float.parseFloat(parts[0].toString());
			 count++;
		 } 

	}
	String str="";
	for(int i=0;i<count;i++)
	{
		str=str+gametypes[i]+"_"+Integer.toString( counts[i])+"times_"+Float.toString(amounts[i])+',';
	}
	count=0;
	 context.write(new Text(key), new Text(str));
 }
 }
 
 public static void main(String[] args) throws Exception {
 Configuration conf = new Configuration();
 Job job = new Job(conf, "Trans analysis 1");
 job.setJarByClass(map1.class);
 job.setMapperClass(TransMapper.class);
 job.setReducerClass(TransReducer.class);
 job.setOutputKeyClass(Text.class);
 job.setOutputValueClass(Text.class);
  
 //job.setNumReduceTasks(0);

 FileInputFormat.addInputPath(job, new Path(args[0]));
 FileOutputFormat.setOutputPath(job, new Path(args[1]));
 System.exit(job.waitForCompletion(true) ? 0 : 1);
 }
 }


